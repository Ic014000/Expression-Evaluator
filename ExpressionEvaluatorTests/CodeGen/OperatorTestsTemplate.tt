<#+
public class OperatorTestsTemplate : TestsTemplate
{
    public string ClassName;
    public string OperatorName;
    public string Operator;
    public Func<double, double, double> Calculator; 
    public List<ValueDescription> Values;
    public List<ValueDescription> NegativeValues;
    public bool MalformedRightNegativeOnly = false;

    public override string TransformText()
    {
        StartClass(ClassName);

        WriteLeftRightOperatorTests(OperatorName, Operator, Values, Calculator);
        WriteMalformedLeftOfOperatorTests(OperatorName, Operator, Values, Calculator);
        if (MalformedRightNegativeOnly)
            WriteMalformedRightOfOperatorTests(OperatorName, Operator, NegativeValues, Calculator);
        else
            WriteMalformedRightOfOperatorTests(OperatorName, Operator, Values, Calculator);

        EndClass();

        return this.GenerationEnvironment.ToString();
    }

    public void WriteLeftRightOperatorTests(
        string opName, 
        string op,
        List<ValueDescription> values,
        Func<double, double, double> calculator)
    {
        foreach (var vd1 in values)
        {
            foreach (var vd2 in values)
            {
                double outputVal = calculator(vd1.Value, vd2.Value);
                var valueString = double.NaN.Equals(outputVal) ? "double.NaN" : outputVal.ToString("R") + "d";
#>
        [Test]
        public void <#= opName #>Operator_<#= vd1.Description #>AddedTo<#= vd2.Description #>_IsCorrect()
        {
            func.Function = "<#= vd1.Value #> <#= op #> <#= vd2.Value#>";
            Assert.AreEqual(<#= valueString #>, func.EvaluateNumeric());
        }

<#+
            }
        }
    }

    public void WriteMalformedRightOfOperatorTests(
        string opName, 
        string op,
        List<ValueDescription> values,
        Func<double, double, double> calculator)
    {
        foreach (var vd1 in values)
        {
#>
        [Test]
        [ExpectedException(typeof(ExpressionException), ExpectedMessage = "Operator error", MatchType = MessageMatch.Contains)]
        public void <#= opName #>Operator_MalformedExpression<#= vd1.Description #>RightOfOperator_ThrowsException()
        {
            func.Function = "<#= op #> <#= vd1.Value #>";
        }

<#+
        }
    }

    public void WriteMalformedLeftOfOperatorTests(
        string opName, 
        string op,
        List<ValueDescription> values,
        Func<double, double, double> calculator)
    {
        foreach (var vd1 in values)
        {
#>
        [Test]
        [ExpectedException(typeof(ExpressionException), ExpectedMessage = "Operator error", MatchType = MessageMatch.Contains)]
        public void <#= opName #>Operator_MalformedExpression<#= vd1.Description #>LeftOfOperator_ThrowsException()
        {
            func.Function = "<#= vd1.Value #> <#= op #>";
        }

<#+
        }
    }
}
#>