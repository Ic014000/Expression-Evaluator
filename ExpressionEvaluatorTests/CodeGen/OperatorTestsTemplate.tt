<#+
public class OperatorTestsTemplate<T> : TestsTemplate
{
    public string ClassName;
    public string OperatorName;
    public string Operator;
    public Func<T, T, string> Calculator;
    public List<ValueDescription<T>> Values;
    public List<ValueDescription<T>> NegativeValues;
    public string EvaluateType;

    public override string TransformText()
    {
        StartClass(ClassName);

        WriteLeftRightOperatorTests();
        WriteLeftRightOperatorLeftVariableTests();
        WriteLeftRightOperatorRightVariableTests();
        WriteLeftRightOperatorWithVariableTests();
        WriteMalformedLeftOfOperatorTests();
        if (Operator == "-")
            WriteMalformedRightOfOperatorTests(NegativeValues);
        else
            WriteMalformedRightOfOperatorTests(Values);

        EndClass();

        return this.GenerationEnvironment.ToString();
    }

    public void WriteLeftRightOperatorTests()
    {
        foreach (var vd1 in Values)
        {
            foreach (var vd2 in Values)
            {
                var outputVal = Calculator(vd1.Value, vd2.Value);
#>
        [Test]
        public void <#= OperatorName #>Operator_<#= vd1.Description #>With<#= vd2.Description #>_IsCorrect()
        {
            _func.Function = "<#= vd1.Value #> <#= Operator #> <#= vd2.Value#>";
            Assert.AreEqual(<#= outputVal #>, _func.Evaluate<#= EvaluateType #>());
        }

<#+
            }
        }
    }

    public void WriteLeftRightOperatorLeftVariableTests()
    {
        foreach (var vd1 in Values)
        {
            foreach (var vd2 in Values)
            {
                var outputVal = Calculator(vd1.Value, vd2.Value);
#>
        [Test]
        public void <#= OperatorName #>Operator_<#= vd1.Description #>With<#= vd2.Description #>WithLeftVariable_IsCorrect()
        {
            _func.Function = "a <#= Operator #> <#= vd2.Value#>";
            _func.AddSetVariable("a", <#= vd1.TextValue #>);
            Assert.AreEqual(<#= outputVal #>, _func.Evaluate<#= EvaluateType #>());
        }

<#+
            }
        }
    }

    public void WriteLeftRightOperatorRightVariableTests()
    {
        foreach (var vd1 in Values)
        {
            foreach (var vd2 in Values)
            {
                var outputVal = Calculator(vd1.Value, vd2.Value);
#>
        [Test]
        public void <#= OperatorName #>Operator_<#= vd1.Description #>With<#= vd2.Description #>WithRightVariable_IsCorrect()
        {
            _func.Function = "<#= vd1.Value #> <#= Operator #> a";
            _func.AddSetVariable("a", <#= vd2.TextValue #>);
            Assert.AreEqual(<#= outputVal #>, _func.Evaluate<#= EvaluateType #>());
        }

<#+
            }
        }
    }

    public void WriteLeftRightOperatorWithVariableTests()
    {
        foreach (var vd1 in Values)
        {
            foreach (var vd2 in Values)
            {
                var outputVal = Calculator(vd1.Value, vd2.Value);
#>
        [Test]
        public void <#= OperatorName #>Operator_<#= vd1.Description #>With<#= vd2.Description #>WithVariable_IsCorrect()
        {
            _func.Function = "a <#= Operator #> b";
            _func.AddSetVariable("a", <#= vd1.TextValue #>);
            _func.AddSetVariable("b", <#= vd2.TextValue #>);
            Assert.AreEqual(<#= outputVal #>, _func.Evaluate<#= EvaluateType #>());
        }

<#+
            }
        }
    }

    public void WriteMalformedRightOfOperatorTests(List<ValueDescription<T>> values)
    {
        foreach (var vd1 in values)
        {
#>
        [Test]
        [ExpectedException(typeof(ExpressionException), ExpectedMessage = "Operator error", MatchType = MessageMatch.Contains)]
        public void <#= OperatorName #>Operator_MalformedExpression<#= vd1.Description #>RightOfOperator_ThrowsException()
        {
            _func.Function = "<#= Operator #> <#= vd1.Value #>";
        }

<#+
        }
    }

    public void WriteMalformedLeftOfOperatorTests()
    {
        foreach (var vd1 in Values)
        {
#>
        [Test]
        [ExpectedException(typeof(ExpressionException), ExpectedMessage = "Operator error", MatchType = MessageMatch.Contains)]
        public void <#= OperatorName #>Operator_MalformedExpression<#= vd1.Description #>LeftOfOperator_ThrowsException()
        {
            _func.Function = "<#= vd1.Value #> <#= Operator #>";
        }

<#+
        }
    }
}
#>
