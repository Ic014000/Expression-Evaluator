<#+
public class FunctionTestsTemplate : TestsTemplate
{
	public string ClassName;
	public string OperatorName;
	public string Operator;
	public Func<double, double> Calculator; 
    public List<ValueDescription> Values;
	
	public override string TransformText()
	{
		StartClass(ClassName);
		
		WriteFunctionTests(OperatorName, Operator, Values, Calculator);
        WriteMalformedMissingRightParenTests(OperatorName, Operator, Values);            
        WriteMalformedMissingLeftParenTests(OperatorName, Operator, Values);            		
		
		EndClass();
		
        return this.GenerationEnvironment.ToString();
	}

	public void WriteFunctionTests(
        string opName, 
        string op,
        List<ValueDescription> values,
        Func<double, double> calculator)
    {
        foreach (var vd1 in values)
        {
            double outputVal = calculator(vd1.Value);
            var valueString = double.NaN.Equals(outputVal) ? "double.NaN" : outputVal.ToString("R") + "d";
#>
        [Test]
        public void <#= opName #>Operator_CalledWith<#= vd1.Description #>_IsCorrect()
        {
            func.Function = "<#= op #>(<#= vd1.Value #>)";
            Assert.AreEqual(<#= valueString #>, func.EvaluateNumeric());
        }
        
<#+
        }
    }
    
    public void WriteMalformedMissingRightParenTests(
        string opName, 
        string op,
        List<ValueDescription> values)
    {
        foreach (var vd1 in values)
        {
#>
        [Test]
        [ExpectedException(typeof(ExpressionException), ExpectedMessage = "Open and close parenthesis required", MatchType = MessageMatch.Contains)]
        public void <#= opName #>Operator_MalformedExpressionMissingRightParen<#= vd1.Description #>Argument_ThrowsException()
        {
            func.Function = "<#= op #>(<#= vd1.Value #>";
        }
        
<#+
        }
    }

    public void WriteMalformedMissingLeftParenTests(
        string opName, 
        string op,
        List<ValueDescription> values)
    {
        foreach (var vd1 in values)
        {
#>
        [Test]
        [ExpectedException(typeof(ExpressionException), ExpectedMessage = "Open and close parenthesis required", MatchType = MessageMatch.Contains)]
        public void <#= opName #>Operator_MalformedExpressionMissingLeftParen<#= vd1.Description #>Argument_ThrowsException()
        {
            func.Function = "<#= op #> <#= vd1.Value #>)";
        }
        
<#+
        }
    }

}
#>