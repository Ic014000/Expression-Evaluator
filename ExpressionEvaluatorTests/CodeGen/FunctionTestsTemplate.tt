<#+
public class FunctionTestsTemplate : TestsTemplate
{
    public string ClassName;
    public string OperatorName;
    public string Operator;
    public Func<double, string> Calculator;
    public List<ValueDescription<double>> Values;
    public string EvaluateType;

    public override string TransformText()
    {
        StartClass(ClassName);

        WriteFunctionTests();
        WriteMalformedMissingRightParenTests();
        WriteMalformedMissingLeftParenTests();
        WriteMalformedMissingBothParenthesisTests();

        EndClass();

        return this.GenerationEnvironment.ToString();
    }

    public void WriteFunctionTests()
    {
        foreach (var vd1 in Values)
        {
            string outputVal = Calculator(vd1.Value);
            //var valueString = double.NaN.Equals(outputVal) ? "double.NaN" : outputVal.ToString("R") + "d";
#>
        [Test]
        public void <#= OperatorName #>Operator_CalledWith<#= vd1.Description #>_IsCorrect()
        {
            _func.Function = "<#= Operator #>(<#= vd1.Value #>)";
            Assert.AreEqual(<#= outputVal #>, _func.Evaluate<#= EvaluateType #>());
        }

<#+
        }
    }

    public void WriteMalformedMissingRightParenTests()
    {
        foreach (var vd1 in Values)
        {
#>
        [Test]
        [ExpectedException(typeof(ExpressionException), ExpectedMessage = "Close missing", MatchType = MessageMatch.Contains)]
        public void <#= OperatorName #>Operator_MalformedExpressionMissingRightParen<#= vd1.Description #>Argument_ThrowsException()
        {
            _func.Function = "<#= Operator #>(<#= vd1.Value #>";
        }

<#+
        }
    }

    public void WriteMalformedMissingLeftParenTests()
    {
        foreach (var vd1 in Values)
        {
#>
        [Test]
        [ExpectedException(typeof(ExpressionException), ExpectedMessage = "Open missing", MatchType = MessageMatch.Contains)]
        public void <#= OperatorName #>Operator_MalformedExpressionMissingLeftParen<#= vd1.Description #>Argument_ThrowsException()
        {
            _func.Function = "<#= Operator #> <#= vd1.Value #>)";
        }

<#+
        }
    }

    public void WriteMalformedMissingBothParenthesisTests()
    {
        foreach (var vd1 in Values)
        {
#>
        [Test]
        [ExpectedException(typeof(ExpressionException), ExpectedMessage = "Open and close parenthesis required", MatchType = MessageMatch.Contains)]
        public void <#= OperatorName #>Operator_MalformedExpressionMissingBothParenthesis<#= vd1.Description #>Argument_ThrowsException()
        {
            _func.Function = "<#= Operator #> <#= vd1.Value #>";
        }

<#+
        }
    }

}
#>
