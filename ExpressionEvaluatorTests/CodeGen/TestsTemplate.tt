<#+
public class TestsTemplate : Template
{
	public override string TransformText()
	{

        return this.GenerationEnvironment.ToString();
	}
	
	public void StartClass(string name)
    {
#>
// ReSharper disable InconsistentNaming
using NUnit.Framework;
using Vanderbilt.Biostatistics.Wfccm2;

namespace ExpressionEvaluatorTests
{
    [TestFixture]
    public class <#= name #>
    {
        Expression func;

        [SetUp]
        public void init()
        { this.func = new Expression(""); }

        [TearDown]
        public void clear()
        { func.Clear(); }
        
<#+
    }

    public void EndClass()
    {
#>
    }
}
<#+
    }
}

public class ValueDescription
{
    public ValueDescription(string description, double value)
    {
        Value = value;
        Description = description;
    }
    
    public double Value;
    public string Description;
}

public class FunctionDescription<T>
{
    public FunctionDescription(string opName, string op, T calculator)
    {
        OpName = opName;
        Op = op;
        Calculator = calculator;
    }
    
    public string OpName;
    public string Op;
    public T Calculator;
}

public class OperatorDescription
{
    public OperatorDescription(string opName, string op, Func<double, double, double> calculator, bool malformedRightNegativeOnly)
	{
        OpName = opName;
		Op = op;
    	Calculator = calculator;
		MalformedRightNegativeOnly = malformedRightNegativeOnly;
	}
	
    public OperatorDescription(string opName, string op, Func<double, double, double> calculator)
    {
        OpName = opName;
		Op = op;
    	Calculator = calculator;
    }
    
    public string OpName;
	public string Op;
	public Func<double, double, double> Calculator;
	
	public bool MalformedRightNegativeOnly = false;
}
#>
