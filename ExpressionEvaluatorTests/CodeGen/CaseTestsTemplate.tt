<#+
public class CaseTestsTemplate : TestsTemplate
{
	public string ClassName;
	
	public override string TransformText()
	{
		StartClass(ClassName);
		
		WriteFunctionTests();
		
		EndClass();
		
        return this.GenerationEnvironment.ToString();
	}

	public void WriteFunctionTests()
    {
	    List<string> paramNames = new List<string>
	    {
	        "a",
	        "b",
	        "c",
	        "d"
	    };
	    
	    List<Func> funcs = new List<Func>()
	    {
	        new Func{Name = "Sign", NumParameters = 1},
	        new Func{Name = "Abs", NumParameters = 1},
	        new Func{Name = "Neg", NumParameters = 1},
	        new Func{Name = "Ln", NumParameters = 1},
	        new Func{Name = "Now", NumParameters = 0},
	        new Func{Name = "TotalDays", NumParameters = 1},
	        new Func{Name = "TotalHours", NumParameters = 1},
	        new Func{Name = "TotalMinutes", NumParameters = 1},
	        new Func{Name = "TotalSeconds", NumParameters = 1},
	        new Func{Name = "Days", NumParameters = 1},
	        new Func{Name = "Hours", NumParameters = 1},
	        new Func{Name = "Minutes", NumParameters = 1},
	        new Func{Name = "Seconds", NumParameters = 1},
	    };

	    foreach (var f in funcs)
	    {
	        string prms = "";
	        for (int i = 0; i < f.NumParameters; i++)
	        {
	            prms += paramNames[i] + ",";
	        }
	        if (prms.Length > 1)
	            prms = prms.Remove(prms.Length - 1);
#>
        [Test]
        public void <#= f.Name #>_HasCaps_NoException()
        {
            func.Function = "<#= f.Name #>(<#= prms #>)";
        }

        [Test]
        public void <#= f.Name #>_AllLower_NoException()
        {
            func.Function = "<#= f.Name.ToLower() #>(<#= prms #>)";
        }

        [Test]
        public void <#= f.Name #>_AllUpper_NoException()
        {
            func.Function = "<#= f.Name.ToUpper() #>(<#= prms #>)";
        }
		
<#+
    	}
    }
}

public class Func
{
    public string Name;
    public int NumParameters;
}
#>