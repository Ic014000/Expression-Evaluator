<#@ template language="C#" hostspecific="True" debug="True" #>
<#@ assembly name="System.Core" #>
<#@ output extension="log" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="MultipleOutputHelper.ttinclude" #>
<#@ include file="TestsTemplate.tt" #>
<#@ include file="OperatorTestsTemplate.tt" #>
<#@ include file="CaseTestsTemplate.tt" #>
<#@ include file="PrecedenceTestsTemplate.tt" #>
<#@ include file="FunctionTestsTemplate.tt" #>
<#
    List<ValueDescription<double>> negativeValues = new List<ValueDescription<double>>
    {
        new ValueDescription<double>("NegativeWhole", -2d, "-2d"),
        new ValueDescription<double>("NegativeFraction", -0.5d, "-0.5d"),
    };
    
    List<ValueDescription<double>> positiveValues = new List<ValueDescription<double>>
    {
        new ValueDescription<double>("PositiveWhole", 2d, "2d"),
        new ValueDescription<double>("PositiveFraction", 0.5d, "0.5d"),
    };
    
    List<ValueDescription<bool>> booleanValues = new List<ValueDescription<bool>>
    {
        new ValueDescription<bool>("BooleanTrue", true, "true"),
        new ValueDescription<bool>("BooleanFalse", false, "false"),
    };
    
    List<ValueDescription<string>> stringValues = new List<ValueDescription<string>>
    {
        new ValueDescription<string>("StringFirst", "'first'", "\"first\""),
        new ValueDescription<string>("StringSecond", "'1sec.ond'", "\"1sec.ond\""),
    };
    
    var doubleDoubleFunctions = new List<ProcedureDescription<Func<double, string>>>
    {
        new NumericProcedureDescription<Func<double, string>>("Ln", "ln", x=> GetString(Math.Log(x))),
        new NumericProcedureDescription<Func<double, string>>("Neg", "neg", x => GetString(-x)),
        new NumericProcedureDescription<Func<double, string>>("Abs", "abs", x => GetString(Math.Abs(x))),
        new NumericProcedureDescription<Func<double, string>>("Sign", "sign", x => GetString(x < 0 ? -1 : 1)),
        new TimeSpanProcedureDescription<Func<double, string>>("Days", "days", x => GetString(new TimeSpan((long)(x * TimeSpan.TicksPerDay)))),
        new TimeSpanProcedureDescription<Func<double, string>>("Hours", "hours", x => GetString(new TimeSpan((long)(x * TimeSpan.TicksPerHour)))),
        new TimeSpanProcedureDescription<Func<double, string>>("Minutes", "minutes", x => GetString(new TimeSpan((long)(x * TimeSpan.TicksPerMinute)))),
        new TimeSpanProcedureDescription<Func<double, string>>("Seconds", "seconds", x => GetString(new TimeSpan((long)(x * TimeSpan.TicksPerSecond)))),
    };

    var leftRightNumericOperators = new List<ProcedureDescription<Func<double, double, string>>>
    {
        new NumericProcedureDescription<Func<double, double, string>>("Addition", "+", (a,b) => GetString(a+b)),
        new NumericProcedureDescription<Func<double, double, string>>("Subtraction", "-", (a,b) => GetString(a-b)),
        new NumericProcedureDescription<Func<double, double, string>>("Multiplication", "*", (a,b) => GetString(a*b)),
        new NumericProcedureDescription<Func<double, double, string>>("Division", "/", (a,b) => GetString(a/b)),
        new NumericProcedureDescription<Func<double, double, string>>("Power", "^", (a,b) => GetString(Math.Pow(a,b))),
        new BooleanProcedureDescription<Func<double, double, string>>("GreaterThan", ">", (a,b) => GetString(a>b)),
        new BooleanProcedureDescription<Func<double, double, string>>("GreaterEqual", ">=", (a,b) => GetString(a>=b)),
        new BooleanProcedureDescription<Func<double, double, string>>("LesserThan", "<", (a,b) => GetString(a<b)),
        new BooleanProcedureDescription<Func<double, double, string>>("LesserEqual", "<=", (a,b) => GetString(a<=b)),
        new BooleanProcedureDescription<Func<double, double, string>>("EqualNumeric", "==", (a,b) => GetString(a==b)),
        new BooleanProcedureDescription<Func<double, double, string>>("NotEqualNumeric", "!=", (a,b) => GetString(a!=b)),
    };
    
    var leftRightBooleanOperators = new List<ProcedureDescription<Func<bool, bool, string>>>
    {
        new BooleanProcedureDescription<Func<bool, bool, string>>("Or", "||", (a,b) => GetString(a||b)),
        new BooleanProcedureDescription<Func<bool, bool, string>>("And", "&&", (a,b) => GetString(a&&b)),
        new BooleanProcedureDescription<Func<bool, bool, string>>("EqualBoolean", "==", (a,b) => GetString(a==b)),
        new BooleanProcedureDescription<Func<bool, bool, string>>("NotEqualBoolean", "!=", (a,b) => GetString(a!=b)),
    };

    var leftRightStringOperators = new List<ProcedureDescription<Func<string, string, string>>>
    {
        new BooleanProcedureDescription<Func<string, string, string>>("EqualString", "==", (a,b) => GetString(a==b)),
        new BooleanProcedureDescription<Func<string, string, string>>("NotEqualString", "!=", (a,b) => GetString(a!=b)),
    };

    var values = positiveValues.Union(negativeValues).ToList();

    var manager = Manager.Create(Host, GenerationEnvironment);

    foreach(var func in doubleDoubleFunctions)
    {
        var template = new FunctionTestsTemplate();
        //template.Output.File = @"..\" + func.OpName + @"FunctionTests.generated.cs";
        template.ClassName = func.OpName + "FunctionTests";
        template.OperatorName = func.OpName;
        template.Operator = func.Op;    
        template.Values = values;
        template.Calculator = func.Calculator;
		template.EvaluateType = func.EvaluationType;
        manager.StartNewFile(@"..\" + func.OpName + @"FunctionTests.generated.cs");
        #><#= template.TransformText() #><#
        manager.EndBlock();
    }
    
    foreach(var op in leftRightNumericOperators)
    {
        var template = new OperatorTestsTemplate<double>();
        //template.Output.File = @"..\" + op.OpName + @"OperatorTests.generated.cs";
        template.ClassName = op.OpName + "OperatorTests";
        template.OperatorName = op.OpName;
		template.Operator = op.Op;    
        template.Values = values;
        
		template.NegativeValues = negativeValues;

		template.Calculator = op.Calculator;
		template.EvaluateType = op.EvaluationType;
        manager.StartNewFile(@"..\" + op.OpName + @"OperatorTests.generated.cs");
        #><#= template.TransformText() #><#
        manager.EndBlock();
    }
    
    foreach(var op in leftRightBooleanOperators)
    {
        var template = new OperatorTestsTemplate<bool>();
        //template.Output.File = @"..\" + op.OpName + @"OperatorTests.generated.cs";
        template.ClassName = op.OpName + "OperatorTests";
        template.OperatorName = op.OpName;
		template.Operator = op.Op;    
        template.Values = booleanValues;
        template.Calculator = op.Calculator;
		template.EvaluateType = op.EvaluationType;
        manager.StartNewFile(@"..\" + op.OpName + @"OperatorTests.generated.cs");
        #><#= template.TransformText() #><#
        manager.EndBlock();
    }
    
    foreach(var op in leftRightStringOperators)
    {
        var template = new OperatorTestsTemplate<string>();
        //template.Output.File = @"..\" + op.OpName + @"OperatorTests.generated.cs";
        template.ClassName = op.OpName + "OperatorTests";
        template.OperatorName = op.OpName;
		template.Operator = op.Op;    
        template.Values = stringValues;
        template.Calculator = op.Calculator;
		template.EvaluateType = op.EvaluationType;
        manager.StartNewFile(@"..\" + op.OpName + @"OperatorTests.generated.cs");
        #><#= template.TransformText() #><#
        manager.EndBlock();
    }
    
    var t = new CaseTestsTemplate();
    t.ClassName = "CaseTests";
    manager.StartNewFile(@"..\CaseTests.generated.cs");
    #><#= t.TransformText() #><#
    manager.EndBlock();
    
    var q = new PrecedenceTestsTemplate();
    q.ClassName = "PrecedenceTestsBase";
    manager.StartNewFile(@"..\PrecedenceTestsBase.generated.cs");
    #><#= q.TransformText() #><#
    manager.EndBlock();

    manager.Process(true, false);
#>
<#+
public string GetString(bool val)
{
	return val ? "true" : "false";
}

public string GetString(double val)
{
	return double.NaN.Equals(val) ? "double.NaN" : val.ToString("R") + "d";
}

public string GetString(TimeSpan val)
{
	return "new TimeSpan(" + val.Ticks.ToString() + "L)";
}

public class ProcedureDescription<T>
{
    public ProcedureDescription(string opName, string op, T calculator)
    {
        OpName = opName;
		Op = op;
    	Calculator = calculator;
		Init();
    }
    
    public string OpName;
	public string Op;
	public T Calculator;
	public string EvaluationType;	
	public bool MalformedRightNegativeOnly = false;
	
	virtual protected void Init()
	{}

}

public class NumericProcedureDescription<T> : ProcedureDescription<T>
{	
    public NumericProcedureDescription(string opName, string op, T calculator) :
		base(opName, op, calculator)
	{}
	
	override protected void Init()
	{
		EvaluationType = "Numeric";
	}
}

public class TimeSpanProcedureDescription<T> : ProcedureDescription<T>
{	
    public TimeSpanProcedureDescription(string opName, string op, T calculator) :
		base(opName, op, calculator)
	{}
	
	override protected void Init()
	{
		EvaluationType = "<TimeSpan>";
	}
}

public class BooleanProcedureDescription<T> : ProcedureDescription<T>
{	
    public BooleanProcedureDescription(string opName, string op, T calculator) :
		base(opName, op, calculator)
	{}
	
	override protected void Init()
	{
		EvaluationType = "Boolean";
	}
}

#>