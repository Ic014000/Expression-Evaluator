<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
	List<string> paramNames = new List<string>
	{
		"a",
		"b",
		"c",
		"d"
	};
	
	List<Func> funcs = new List<Func>()
	{
		new Func{Name = "Sign", NumParameters = 1},
		new Func{Name = "Abs", NumParameters = 1},
		new Func{Name = "Neg", NumParameters = 1},
		new Func{Name = "Ln", NumParameters = 1},
		new Func{Name = "Now", NumParameters = 0},
		new Func{Name = "TotalDays", NumParameters = 1},
		new Func{Name = "TotalHours", NumParameters = 1},
		new Func{Name = "TotalMinutes", NumParameters = 1},
		new Func{Name = "TotalSeconds", NumParameters = 1},
		new Func{Name = "Days", NumParameters = 1},
		new Func{Name = "Hours", NumParameters = 1},
		new Func{Name = "Minutes", NumParameters = 1},
		new Func{Name = "Seconds", NumParameters = 1},
	};
#>
// ReSharper disable InconsistentNaming
using NUnit.Framework;
using Vanderbilt.Biostatistics.Wfccm2;

namespace ExpressionEvaluatorTests
{
    [TestFixture]
    public class CaseTests
    {
        Expression func;

        [SetUp]
        public void init()
        { this.func = new Expression(""); }

        [TearDown]
        public void clear()
        { func.Clear(); }
<#
	foreach (var f in funcs)
	{
		string prms = "";
		for (int i = 0; i < f.NumParameters; i++)
		{
			prms += paramNames[i] + ",";
		}
		if (prms.Length > 1)
			prms = prms.Remove(prms.Length - 1);
#>

		[Test]
        public void <#= f.Name #>_HasCaps_NoException()
        {
            func.Function = "<#= f.Name #>(<#= prms #>)";
        }

		[Test]
        public void <#= f.Name #>_AllLower_NoException()
        {
            func.Function = "<#= f.Name.ToLower() #>(<#= prms #>)";
        }

		[Test]
        public void <#= f.Name #>_AllUpper_NoException()
        {
            func.Function = "<#= f.Name.ToUpper() #>(<#= prms #>)";
        }
<#
	}
#>
    }
} 
<#+
    public class Func
    {
        public string Name;
		public int NumParameters;
    }
#>